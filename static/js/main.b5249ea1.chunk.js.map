{"version":3,"sources":["media/logo.png","Games/RandomGen.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","RandomGen","props","startScreen","Card","Body","DropdownButton","id","title","Dropdown","Item","onClick","setLimit","gameScreen","Title","state","limit","screen","console","log","this","setState","Container","bg","text","React","Component","Home","handler","Row","Col","className","Img","variant","src","Text","Button","App","arg","currentPage","bind","showHome","fluid","logo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b5249ea1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.0a6b31c6.png\";","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport '../App.css';\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\n\r\n\r\nexport default class RandomGen extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            limit: 0,\r\n            screen: this.startScreen,\r\n        };\r\n    }\r\n\r\n    startScreen = (\r\n            <Card.Body>\r\n                <DropdownButton id=\"dropdown-basic-button\" title=\"Select a limit\">\r\n                    <Dropdown.Item onClick={() => {this.setLimit(100)}}>100</Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => {this.setLimit(1000)}}>1000</Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => {this.setLimit(10000)}}>10,000</Dropdown.Item>\r\n                </DropdownButton>\r\n            </Card.Body>\r\n    );\r\n\r\n    gameScreen = (\r\n\r\n            <Card.Body>\r\n                <Card.Title>\r\n                    top uck\r\n                </Card.Title>\r\n            </Card.Body>\r\n\r\n    );\r\n\r\n    setLimit(limit) {\r\n        console.log(\"TEST\");\r\n        this.setState({\r\n            limit: limit,\r\n            screen: this.gameScreen,\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n            <Container>\r\n                <Card  bg=\"light\" text=\"dark\">\r\n                    <Card.Title>\r\n                        Random Number Generator\r\n                    </Card.Title>\r\n\r\n                    { this.state.screen }\r\n\r\n                </Card>\r\n            </Container>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport RandomGen from './Games/RandomGen.js';\r\nimport './App.css';\r\n\r\nexport default class Home extends React.Component {\r\n\r\n    render() {\r\n        var handler = this.props.handler;\r\n\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <Col>\r\n                        <Card className=\"Home-card\">\r\n                            <Card.Img className=\"Home-image\" variant=\"top\" src=\"http://placehold.jp/180x100.png\" />\r\n                            <Card.Body>\r\n                                <Card.Title>Random Number</Card.Title>\r\n                                <Card.Text>\r\n                                    Keep rolling until someone gets a 1, they have to down their drink.\r\n                                </Card.Text>\r\n                                <Button onClick={() => handler(<RandomGen />)} variant=\"primary\">Play</Button>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col>\r\n                        <Card className=\"Home-card\">\r\n                            <Card.Img className=\"Home-image\" variant=\"top\" src=\"http://placehold.jp/180x100.png\" />\r\n                            <Card.Body>\r\n                                <Card.Title>Coming Soon</Card.Title>\r\n                                <Card.Text>\r\n                                    Some quick example text to build on the card title and make up the bulk of\r\n                                    the card's content.\r\n                                </Card.Text>\r\n                                <Button variant=\"primary disabled\">Play</Button>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col>\r\n                        <Card className=\"Home-card\">\r\n                            <Card.Img className=\"Home-image\" variant=\"top\" src=\"http://placehold.jp/180x100.png\" />\r\n                            <Card.Body>\r\n                                <Card.Title>Coming Soon</Card.Title>\r\n                                <Card.Text>\r\n                                    Some quick example text to build on the card title and make up the bulk of\r\n                                    the card's content.\r\n                                </Card.Text>\r\n                                <Button variant=\"primary disabled\">Play</Button>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n","import React from 'react';\nimport logo from './media/logo.png';\nimport './App.css';\nimport Home from './Home.js';\nimport RandomGen from './Games/RandomGen.js';\nimport Container from \"react-bootstrap/Container\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\n\nexport default class App extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state ={\n            currentPage: <Home handler = {this.handler} />,\n        };\n        this.handler = this.handler.bind(this);\n        this.showHome = this.showHome.bind(this);\n    }\n\n    handler = (arg) => {\n        this.setState({\n            currentPage: arg,\n        });\n    }\n\n    showHome() {\n        this.setState({currentPage: <Home handler = {this.handler} /> });\n    }\n\n    showRandomGen() {\n        this.setState({currentPage: <RandomGen handler = {this.handler} />})\n    }\n\n    render() {\n        return (\n            <Container fluid className=\"App\">\n                <Container className=\"App-header\">\n                    <img className=\"App-logo\" onClick={this.showHome} src={logo} />\n                </Container>\n                <Container className=\"App-body\">\n                    <Row>\n                        <Col>\n                            <Container>\n                                { this.state.currentPage }\n                            </Container>\n                        </Col>\n                    </Row>\n                </Container>\n            </Container>\n\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}